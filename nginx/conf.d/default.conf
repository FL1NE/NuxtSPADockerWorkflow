# Global http directive declaration here.

# Hide version of nginx
server_tokens off;

server {
    listen 80;
    listen  [::]:80;
    server_name  localhost;
    charset utf-8;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }

    # Enable this option 404 will managed by nuxt.js
    # This option is needed for avoid _id.vue error.
    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # # Proxy example
    # location /example/ {
    #     # Must be filled complete URI (which contain / at end)
    #     proxy_pass http://example.com/;
    #     proxy_redirect off;
    # }

# ==============================================================================
# Performance improvement
# ==============================================================================
    # Gunzip on (Why not??)
    gzip on;

    # Gunzip settings
    gzip_vary on;
    gzip_proxied any;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain
        text/xml
        text/css
        text/javascript
        image/gif
        image/png
        image/jpeg
        application/javascript
        application/x-javascript
        application/json
        application/font-woff
        application/font-tff
        application/octet-stream;

    # Disabled cache policy to make more simply
    # And you know PWA service worker will cache files.

    # # Cache static assets
    # location ~* \.(jpg|jpeg|gif|png|css|js|swf|ico|pdf|svg|eot|ttf|woff)$ {
    #     expires 2d;
    #     add_header Cache-Control "public, no-transform";
    #     access_log off;
    # }

    # Open file cache
    # open_file_cache max=100000 inactive=20s;
    # open_file_cache_valid 30s;
    # open_file_cache_min_uses 2;
    # open_file_cache_errors on;
}
